{"version":3,"sources":["BooksAPI.js","Book.js","ListBooks.js","Search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","books","update","book","shelf","id","method","body","JSON","stringify","search","query","Book","state","handleSelfClick","setState","BooksAPI","props","refreshBooks","componentDidMount","this","className","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","e","target","disabled","title","authors","map","author","i","key","PureComponent","ListBooks","ListType","filter","Search","handleQuery","a","length","error","forEach","to","type","placeholder","Component","BooksApp","GetBooks","path","render","exact","React","ReactDOM","StrictMode","document","getElementById"],"mappings":"yTACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACd,OAAU,mBACV,cAAiBN,GAQNO,EAAS,kBACpBC,MAAM,GAAD,OAAIT,EAAJ,UAAiB,CAAEO,YACrBG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,UAEVC,EAAS,SAACC,EAAMC,GAAP,OACpBR,MAAM,GAAD,OAAIT,EAAJ,kBAAiBgB,EAAKE,IAAM,CAC/BC,OAAQ,MACRZ,QAAQ,2BACHA,GADE,IAEL,eAAgB,qBAElBa,KAAMC,KAAKC,UAAU,CAAEL,YACtBP,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAERW,EAAS,SAACC,GAAD,OACpBf,MAAM,GAAD,OAAIT,EAAJ,WAAkB,CACrBmB,OAAQ,OACRZ,QAAQ,2BACHA,GADE,IAEL,eAAgB,qBAElBa,KAAMC,KAAKC,UAAU,CAAEE,YACtBd,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,UCYRW,E,4MA7CXC,MAAQ,CACJT,MAAM,Q,EAEVU,gBAAiB,SAACV,GAEd,EAAKW,SAAS,CACVX,UAEJY,EAAgB,CAACX,GAAG,EAAKY,MAAMd,KAAKE,IAAID,GACxC,EAAKa,MAAMC,gB,EAEfC,kBAAmB,WAEZ,EAAKF,MAAMd,KAAKC,OAEf,EAAKU,gBAAgB,EAAKG,MAAMd,KAAKC,Q,uDAK5C,IAAD,OACWD,EAAOiB,KAAKH,MAAZd,KACP,OACI,yBAAKkB,UAAU,QACD,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aAAaC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAIC,gBAAgB,OAAD,OAAStB,EAAKuB,WAAavB,EAAKuB,WAAWC,UAAY,OAAvD,QAC5E,yBAAKN,UAAU,sBACb,4BAAQO,MAAOR,KAAKP,MAAMT,MAAOyB,SAAU,SAACC,GAAD,OAAO,EAAKhB,gBAAgBgB,EAAEC,OAAOH,SAC9E,4BAAQA,MAAM,OAAOI,UAAQ,GAA7B,cACA,4BAAQJ,MAAM,oBAAd,qBACA,4BAAQA,MAAM,cAAd,gBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,WAIN,yBAAKP,UAAU,cAAclB,EAAK8B,OACjC9B,EAAK+B,SAAW/B,EAAK+B,QAAQC,KAAI,SAACC,EAAOC,GAAR,OAChC,yBAAKC,IAAKD,EAAGhB,UAAU,gBAAgBe,W,GA5ChDG,iBCuBJC,EAxBG,SAACvB,GAEf,OACI,yBAAKI,UAAU,aACL,wBAAIA,UAAU,mBAAmBJ,EAAMwB,UACvC,yBAAKpB,UAAU,mBACb,wBAAIA,UAAU,cACbJ,EAAMhB,MAAMyC,QAAO,SAACvC,GAAD,OAAUA,EAAKC,QAAQa,EAAMwB,YAAUN,KAAI,SAAChC,GAAD,OAC3D,wBAAImC,IAAKnC,EAAKE,IACd,kBAAC,EAAD,CAAMF,KAAMA,EAAMe,aAAcD,EAAMC,uBC+D/CyB,G,kNAhEX9B,MAAO,CACHF,MAAM,GACNV,MAAM,I,EAEV2C,Y,uCAAc,WAAOjC,GAAP,SAAAkC,EAAA,yDAEV,EAAK9B,SAAS,CACVJ,UAEgB,IAAjBA,EAAMmC,OALC,gBAMN,EAAK/B,SAAS,CAACJ,QAAOV,MAAO,KANvB,2BAQHU,EAAMmC,OAAO,GARV,gCAUL9B,EAAgBL,GAAUd,MAAK,SAAAI,GAC5BA,EAAM8C,MAcN,EAAKhC,SAAS,CAAEd,MAAO,MAbvBA,EAAMkC,KAAI,SAAChC,GAAD,OACR,EAAKc,MAAMhB,MAAM+C,SAAQ,SAACpC,GACtBA,EAAKP,KAAOF,EAAKE,KAEhBF,EAAKC,MAAMQ,EAAKR,aAKvB,EAAKW,SAAS,CAACd,cArBb,2C,6GAiCb,IAAD,OACI,OACI,yBAAKoB,UAAU,gBACf,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAM4B,GAAG,IAAI5B,UAAU,gBAAvB,SACA,yBAAKA,UAAU,8BACb,2BAAO6B,KAAK,OAAOC,YAAY,4BAC/BvB,MAAOR,KAAKP,MAAMF,MAClBkB,SAAU,SAACC,GAAD,OAAO,EAAKc,YAAYd,EAAEC,OAAOH,YAG/C,yBAAKP,UAAU,wBACb,wBAAIA,UAAU,cACbD,KAAKP,MAAMZ,MAAM6C,OAAO,EACzB1B,KAAKP,MAAMZ,MAAMkC,KAAI,SAAChC,GAAD,OACrB,wBAAImC,IAAKnC,EAAKE,IACd,kBAAC,EAAD,CAAMF,KAAMA,EAAMe,aAAc,EAAKD,MAAMC,mBAElB,KAArBE,KAAKP,MAAMF,MAAe,+DAA0C,uD,GA5DjEyC,c,OCgDNC,E,4MA/CbxC,MAAQ,CACNZ,MAAM,I,EAERqD,S,sBAAW,sBAAAT,EAAA,sEAEH7B,IAAkBnB,MAAK,SAACI,GAE7B,EAAKc,SAAS,CACZd,aALM,2C,kEAWTmB,KAAKkC,a,+BAEG,IAAD,OACP,OACE,yBAAKjC,UAAU,OACf,kBAAC,IAAD,CAAOkC,KAAK,UACZC,OAAQ,kBAEJ,kBAAC,EAAD,CAAQvD,MAAO,EAAKY,MAAMZ,MAAOiB,aAAc,kBAAM,EAAKoC,iBAG5D,kBAAC,IAAD,CAAOG,OAAK,EAACF,KAAK,KAChB,yBAAKlC,UAAU,cACb,yBAAKA,UAAU,oBACb,wCAEF,yBAAKA,UAAU,sBACb,6BACC,kBAAC,EAAD,CAAWpB,MAAOmB,KAAKP,MAAMZ,MAAOwC,SAAU,mBAAqBvB,aAAc,kBAAM,EAAKoC,cAC5F,kBAAC,EAAD,CAAWrD,MAAOmB,KAAKP,MAAMZ,MAAOwC,SAAU,aAAevB,aAAc,kBAAM,EAAKoC,cACtF,kBAAC,EAAD,CAAWrD,MAAOmB,KAAKP,MAAMZ,MAAOwC,SAAU,OAASvB,aAAc,kBAAM,EAAKoC,gBAGnF,yBAAKjC,UAAU,eACb,kBAAC,IAAD,CAAM4B,GAAG,WAAU,uD,GAvCVS,IAAMN,WCA7BO,IAASH,OACP,kBAAC,IAAMI,WAAP,KACA,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGAC,SAASC,eAAe,W","file":"static/js/main.e9c47b5e.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { PureComponent} from 'react';\r\nimport * as BooksAPI from './BooksAPI';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Book extends PureComponent \r\n{\r\n    static propTypes = {\r\n        book: PropTypes.object.isRequired,\r\n        refreshBooks : PropTypes.func.isRequired\r\n    }\r\n    state = {\r\n        shelf:'none'\r\n    }\r\n    handleSelfClick =(shelf) =>\r\n    {\r\n        this.setState({\r\n            shelf\r\n        })\r\n        BooksAPI.update({id:this.props.book.id},shelf)\r\n        this.props.refreshBooks()\r\n    }\r\n    componentDidMount =() =>\r\n    {\r\n        if(this.props.book.shelf)\r\n        {\r\n            this.handleSelfClick(this.props.book.shelf)\r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        const {book} =this.props\r\n        return (\r\n            <div className=\"book\">\r\n                          <div className=\"book-top\">\r\n                            <div className=\"book-cover\" style={{ width: 128, height: 193,backgroundImage: `url(${book.imageLinks ? book.imageLinks.thumbnail : 'none' })` }}></div>\r\n                            <div className=\"book-shelf-changer\">\r\n                              <select value={this.state.shelf} onChange={(e) => this.handleSelfClick(e.target.value)}>\r\n                                <option value=\"move\" disabled>Move to...</option>\r\n                                <option value=\"currentlyReading\">Currently Reading</option>\r\n                                <option value=\"wantToRead\">Want to Read</option>\r\n                                <option value=\"read\">Read</option>\r\n                                <option value=\"none\">None</option>\r\n                              </select>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"book-title\">{book.title}</div>\r\n                          {book.authors && book.authors.map((author,i) =>\r\n                            <div key={i} className=\"book-authors\">{author}</div>\r\n                            )}\r\n                        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Book","import React from 'react';\r\nimport Book from './Book';\r\nimport PropTypes from 'prop-types';\r\nconst ListBooks = (props) =>\r\n{\r\n    return (\r\n        <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">{props.ListType}</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                    {props.books.filter((book) => book.shelf===props.ListType).map((book) => \r\n                        <li key={book.id}>\r\n                        <Book book={book} refreshBooks={props.refreshBooks}/>\r\n                      </li>\r\n                    )}\r\n                      </ol>\r\n                  </div>\r\n                </div>\r\n    )\r\n}\r\n\r\nListBooks.propTypes = {\r\n  books:PropTypes.array.isRequired,\r\n  ListType:PropTypes.string.isRequired,\r\n  refreshBooks : PropTypes.func.isRequired\r\n}\r\n\r\nexport default ListBooks","import React, { Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport * as BooksAPI from './BooksAPI';\r\nimport Book from './Book';\r\n\r\nclass Search extends Component\r\n{\r\n  static propTypes = {\r\n    refreshBooks : PropTypes.func.isRequired\r\n}\r\n    state ={\r\n        query:'',\r\n        books:[]\r\n    }\r\n    handleQuery = async (query) =>\r\n    {\r\n        this.setState({\r\n            query\r\n        })\r\n        if(query.length === 0) {\r\n            this.setState({query, books: []})\r\n        }\r\n       else if(query.length>0)\r\n        {\r\n       await BooksAPI.search(query,20).then(books => {\r\n            if(!books.error){\r\n                books.map((book)=>      \r\n                  this.props.books.forEach((Book)=> \r\n                 { if(Book.id === book.id)\r\n                  {\r\n                       book.shelf=Book.shelf;\r\n                  }\r\n               }\r\n                 )\r\n                )\r\n                this.setState({books})\r\n            }\r\n            else\r\n            {\r\n                this.setState({ books: []})\r\n            }\r\n   })\r\n}\r\n        \r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n              <Link to='/' className=\"close-search\">Close</Link>\r\n              <div className=\"search-books-input-wrapper\">\r\n                <input type=\"text\" placeholder=\"Search by title or author\" \r\n                value={this.state.query}\r\n                onChange={(e) => this.handleQuery(e.target.value)}/>\r\n              </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              <ol className=\"books-grid\">\r\n              {this.state.books.length>0 ? \r\n              this.state.books.map((book) =>\r\n              <li key={book.id}>\r\n              <Book book={book} refreshBooks={this.props.refreshBooks}/>      \r\n                      </li>\r\n              ) : this.state.query !== '' ? <p>No Result found for this search.</p> : <p>Search a keyword.</p> \r\n            }\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport ListBooks from './ListBooks'\r\nimport './App.css'\r\nimport Search from './Search'\r\nimport {Route,Link} from 'react-router-dom'\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books:[]\r\n  }\r\n  GetBooks = async () => \r\n  { \r\n    await BooksAPI.getAll().then((books) =>\r\n    {\r\n     this.setState({\r\n       books\r\n     })\r\n    })\r\n  }\r\n  componentDidMount ()\r\n  {\r\n    this.GetBooks()\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n      <Route path='/search' \r\n      render={() => \r\n        (\r\n          <Search books={this.state.books} refreshBooks={() => this.GetBooks()}/>\r\n        )}\r\n       />\r\n        <Route exact path='/'>\r\n          <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n               <ListBooks books={this.state.books} ListType={\"currentlyReading\"}  refreshBooks={() => this.GetBooks()}/>\r\n               <ListBooks books={this.state.books} ListType={\"wantToRead\"}  refreshBooks={() => this.GetBooks()}/>\r\n               <ListBooks books={this.state.books} ListType={\"read\"}  refreshBooks={() => this.GetBooks()}/>\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n              <Link to='/search'><button>Add a book</button></Link>\r\n            </div>\r\n          </div>\r\n          </Route>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n  <App />\n  </BrowserRouter> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}